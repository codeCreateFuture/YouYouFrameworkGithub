1.代码执行顺序设置，GameEntry最先开始
2.继承IUpdateComponent接口，需要注意在实现OnUpdate方法中，加入判定当前组件是否处于激活状态的代码，
	避免组件禁用时GameEntry中仍然执行OnUpdate方法

对象池：
1.类对象池从池中拿出来之后，要先重置
2.不能使用带参构造函数，可以用Init方法代替，进行重置，带参无法泛型创建

var变量使用：
1.协程使用Var变量，一定要先保留，协程结束再释放（避免变量在协程外部释放，然后协程等待时间结束时变量
	已经更改或者不存在了），同步方法，用完直接释放，必须释放
2.Var变量，一个Alloc一定要对应一个Release,否则这个Var箱子永远无法回池
3.状态机用var传递变量，不用对象池功能，因为不知道何时释放，主要解决装箱拆箱问题。事件系统用Var传递
	变量，不仅解决装箱拆箱问题，还用到对象池功能，因为派发事件之后，可以直接释放var变量
4.var变量在作用域中使用也可以达到优化内存的效果

Tools压缩包：
1.ExcelTool表格生成工具，根据表格生成bytes，c#，lua脚本。
	解压Tools压缩包到当前文件夹
	Tools\ExcelTool\bin\Debug\config.txt文件，设置里面的四个路径
	里面的四个路径分别为：表格源数据路径，生成的bytes文件路径，生成的c#文件路径，生成的lua脚本路径。
	ExcelTool.exe为启动程序，直接运行既可以根据配置的路径生成bytes，c#，lua脚本
	
Datas文件夹：
1.本地数据表：包含表格文件，ExcelTool.exe快捷方式，输出文件夹out，使用前先自己设置好上一条提到的四个
	路径，然后创建ExcelTool.exe的快捷方式到本地数据表文件夹中，然后直接双击快捷方式即可生成bytes，c#，lua脚本
	表格的格式要.xls后缀的文件，默认打开方式要是office而不能是wps，因为ExcelTool用到了office驱动

Tool_Proto
1.proto生成工具，运行youyou_Proto\youyou_Proto\bin\Debug\youyou_Proto.exe 程序, 配置生成的c#协议路径，lua协议路径
	协议对应的Handler路径（主要负责监听协议的代码）

Http和Socket：测试Http和Socket都需要有服务端的Http和Socket工程才能互相通讯，仅仅有Unity客户端工程是无法通讯的

UI框架使用：
1.制作UI预制体添加Canvas组件，用以设置层级sortorder参数
2.流程：向服务器发送请求，获取UI数据，将数据存入GameEntry.Data.UserDataManager用户数据中，
		使用UI框架实例化打开UI（通过id查找UIFrom表，获取UI预制体的位置及分组等信息，实例化），
		UI逻辑组件继承UIFormBase，打开时调用OnOpen方法从GameEntry.Data.UserDataManager中
		获取UI数据，赋值UI窗体的内容，赋值内容时配置多语言（服务器返回的数据包含任务表中的id，用于
		取多语言对应值）
		
		页面监听接收到服务器返回任务数据的事件，页面点击按钮，发送请求数据协议，接受服务器返回数据，
		将数据存储入GameEntry.Data中，派发接收到服务器返回任务数据的事件，页面监听事件之后调用方法
		实例化UI窗体，窗体的UIFormBase方法自动调用OnOpen从GameEntry.Data获取数据赋值UI内容

